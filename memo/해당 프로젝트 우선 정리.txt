Component:
 - 컴포넌트란, html 을 반환하는 "함수" 다.
 - 컴포넌트를 만들때는 react 패키지에서 React 를 import 해야한다.(.js 파일)

React 에서는 오직 하나의 "컴포넌트" 만 render 한다.
 - index.js 파일에서 ReactDOM.render 로 컴포넌트를 render 한다. 이때 오직 하나의 컴포넌트만 할 수 있다.
 - index.js 파일을 확인하면 ReactDOM 이 render 하는 컴포넌트는 App 인 것을 확인할 수 있다.
   이 App 컴포넌트에 다른 컴포넌트들을 import 해서 넣음으로써, 원하는 만큼의 컴포넌트들을 사용할 수
   있다.

=====================================================================
컴포넌트에는 정보를 넘길 수 있다. 그리고 재활용할 수 있다.

function Food({ favorite }){
  return <h1>I like {favorite}</h1>
}

function App() {
  return (
    <div>
      <h1>Hello!!!</h1>
      <Food favorite="kimchi"/>
      <Food favorite="ramen"/>
      <Food favorite="samgyupsal"/>
      <Food favorite="chukumi"/>
    </div>
  );
}

현재 두개의 컴포넌트가 있다 Food 라는 컴포넌트와 App 이라는 컴포넌트가 있고,
App 컴포넌트안에 여러개의 Food 컴포넌트가 있다. Food 컴포넌트를 자세히 들여다보자
<Food favorite="kimchi"/>
<Food favorite="ramen"/>
<Food favorite="samgyupsal"/>
<Food favorite="chukumi"/>
마치 html 의 attribute 들 처럼 값을 갖고 있는 것처럼보인다(favorite)
이것들은 props 라고 불린다. 이렇게 값들을 입력하면 컴포넌트의 정의부에서는 모든 이 props 들을
object 로써 인자로 받을 수 있다.
object{
  favorite: kimchi
}
Food 컴포넌트의 정의부에서는 비구조화 할당을 통해({ favorite }) 값을 받아 반환할때 값을 같이
보내는 것이다. 
return <h1>I like {favorite}</h1>
여기서 I like 부분은 text 다 그러나 {} 을 붙힐경우 이 내부는 javascript 로써 동작한다.
비구조화 할당을 사용한 인자부분의 { favorite } 과 혼동하지 않아야한다.
=====================================================================
앞써 컴포넌트는 재활용할 수 있음을 배웠다. 그러나 같은 컴포넌트를 여러번 사용하게 될 경우, react 는
에러를 발생시키는데 에러의 내용은 key 가 없다는 것이다. key 가 없으므로써 각각의 컴포넌트들의 유일함이
없다는 것이 에러발생의 이유인 것같다.
해결방법은
<Food key={dish.id} name={dish.name} picture={dish.image} />
와 같이 key prop 을 같이 넘겨주면된다. 
=====================================================================
prop-types: npm 을 통해 다운받을 수 있는 패키지. 컴포넌트의 props 의 자료형이나 필수여부등을 제어한다.
Food.propTypes = {
  name: PropTypes.string.isRequired,
  picture: PropTypes.string.isRequired,
  rating: PropTypes.number.isRequired
}
컴포넌트 Food 에 대한 제어의 사용법이다.
.propTypes 라고 사용해야하면 다른 이름은 작동하지 않는다.\
각 prop 별로 자료형이나 필수여부를 제어할 수 있다. 
=====================================================================
Class Component : 클래스 컴포넌트는 React.Component 를 상속받는다
상속을 받음으로써 함수 컴포넌트와 다르게 return 을 바로 하지 않고 render() 메소드를 사용한다.

this.state.count = 1;
위의 로직은 제대로 작동하지 않는다. 그 이유는 이 로직은 컴포넌트를 다시 render 하지 않기 때문이다.
그래서 react 는 setState 를 제공한다.
this.setState()
setState 는 자동으로 변경된 값과 함께 컴포넌트를 다시 render 한다.
this.setState(current => ({ count : current.count + 1 }));
setState 는 또한 콜백함수를 제공하는데, 인자로 state 를 받을 수 있다.

또한 클래스 컴포넌트는 render() 말고도 다른 기본 제공하는 메소드들이 있다.
componentDidMount(){} : render() 가 실행된 후 
componentDidUpdate(){}: state 가 바뀌는 것처럼 사용자에게 책임이 있어 값이 바뀌는 경우
이외에도 다른 기능들이 있다.
=====================================================================
axios : 데이터 요청을 쉽게 할 수 있도록 해주는 npm package 이다.
=====================================================================
gh-pages : github 이 제공하는 html, css, js 를 호스팅하도록 해주는 package 이다.
우선 다운을 받은 후,
packages.json 에서 homepage 를 추가한다.
"homepage": "https://leesj020925.github.io/movie_app_2021"
github 아이디.github.io/프로젝트명
그리고 scripts 에
"deploy": "gh-pages -d build",
"predeploy": "npm run build"
이 둘을 추가한다.
pre 가 붙어있으면 pre 다음에 붙은 부분이 실행되기 전에 실행된다.
npm run deploy 를 명령시,
npm run build -> gh-pages -d build 순서로 실행되는데, 여기서 gh-pages -d build 의 build 는
명령어 build 가 아닌 폴더 build 를 의미한다.
deploy(배포) 후 hompage 에 기입한 곳으로 접속 시 작업물을 확인할 수 있다.
=====================================================================
이제 state 를 사용하기위해 꼭 Class Component 를 사용할 필요없다.
왜냐하면 React Hooks 가 생겼기 때문이다.
=====================================================================
React Movie 심화과정도 수강하면 좋을듯
=====================================================================
<BrowserRouter>
  <Route />
  <Route />
  <Link to="" />
</BrowserRouter>
Link 는 href 에서 더 발전한 컴포넌트다 BrowserRouter 안에 존재해야한다. Route 도 마찬가지
모두 react-router-dom 패키지에 있다.
=====================================================================
Route 는 default 로 props 를 보낸다.
Link 는 <Link to="" /> 로 주소만 지정할 수도 있지만
<link to={{
  pathname: "/",
  state: {
    year,
    title
  }
}} />
이렇게 값을 넘길 수도 있다.
=====================================================================
<Route path=/movie/:id component={Home}/>
여기서 /movie/:id 이부분은 :id 이 변수를 받는다는 의미이다.
<link to={{
  pathname: `/{id}`,
}} />
이렇게 넘겨 줄 수 있다.
=====================================================================
강의를 배우고서...
강의를 배우고서 react 에 대해서 기본적인 내용을 알게되었는데, 내가 나름대로 이해한 부분을 설명하자면,
React 는 컴포넌트로 이루어져 있다고 봐도 과언이 아니라고 생각한다.
하나의 대표적인 컴포넌트가 정해져있고, document 는 이 하나의 컴포넌트를 바라보고 있는다.
그럼 이 대표적인 컴포넌트안에 다른 하위의 여러 컴포넌트들이 들어갈 수 있다.
라우터란 말그대로 화면의 진입점을 말하는데, BrowserRouter 나 HashRouter 를 부모로, Route 를 자식으로 둔
컴포넌트를 통해 라우터를 구현할 수 있다. 이는 react-router-dom 패키지에 있다.
Link 또한 같은 패키지에 있으며, 이는 정의한 Router 에 요청하는 부분이라고 볼 수 있다.
강의에서는 router 와 comonent 를 나눠서 했는데 이는 편의를 위한 것이지 사실상 둘다 컴포넌트로
생각된다. 다만 역할이 다르므로 어떻게보면 다르다고 확정할 수 있다.
Route 를 통해 지정된 특정 주소의 component 연결되는데, 이때 이 컴포넌트는 router 가 되는 것이고,
진입점이 없고 모듈(부속품) 처럼 어떤 컴포넌트에 장착된다면 이는 그냥 컴포넌트인 것이다.













